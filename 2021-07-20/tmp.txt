
tmp:     file format elf64-x86-64
                                                            #

Disassembly of section .init:
                                                            #
0000000000001000 <_init>:
    1000:	48 83 ec 08          	sub    $0x8,%rsp
    1004:	48 8b 05 dd 2f 00 00 	mov    0x2fdd(%rip),%rax        # 3fe8 <__gmon_start__>
    100b:	48 85 c0             	test   %rax,%rax
    100e:	74 02                	je     1012 <_init+0x12>
    1010:	ff d0                	callq  *%rax
    1012:	48 83 c4 08          	add    $0x8,%rsp
    1016:	c3                   	retq   
                                                            #
Disassembly of section .plt:
                                                            #
0000000000001020 <.plt>:
    1020:	ff 35 e2 2f 00 00    	pushq  0x2fe2(%rip)        # 4008 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	ff 25 e4 2f 00 00    	jmpq   *0x2fe4(%rip)        # 4010 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	0f 1f 40 00          	nopl   0x0(%rax)
                                                            #
Disassembly of section .plt.got:
                                                            #
0000000000001030 <__cxa_finalize@plt>:
    1030:	ff 25 c2 2f 00 00    	jmpq   *0x2fc2(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1036:	66 90                	xchg   %ax,%ax
                                                            #
Disassembly of section .text:
                                                            #
0000000000001040 <_start>:
    1040:	31 ed                	xor    %ebp,%ebp
    1042:	49 89 d1             	mov    %rdx,%r9
    1045:	5e                   	pop    %rsi
    1046:	48 89 e2             	mov    %rsp,%rdx
    1049:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    104d:	50                   	push   %rax
    104e:	54                   	push   %rsp
    104f:	4c 8d 05 7a 01 00 00 	lea    0x17a(%rip),%r8        # 11d0 <__libc_csu_fini>
    1056:	48 8d 0d 13 01 00 00 	lea    0x113(%rip),%rcx        # 1170 <__libc_csu_init>
    105d:	48 8d 3d d5 00 00 00 	lea    0xd5(%rip),%rdi        # 1139 <main>
    1064:	ff 15 76 2f 00 00    	callq  *0x2f76(%rip)        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    106a:	f4                   	hlt    
    106b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                                                            #
0000000000001070 <deregister_tm_clones>:
    1070:	48 8d 3d b1 2f 00 00 	lea    0x2fb1(%rip),%rdi        # 4028 <__TMC_END__>
    1077:	48 8d 05 aa 2f 00 00 	lea    0x2faa(%rip),%rax        # 4028 <__TMC_END__>
    107e:	48 39 f8             	cmp    %rdi,%rax
    1081:	74 15                	je     1098 <deregister_tm_clones+0x28>
    1083:	48 8b 05 4e 2f 00 00 	mov    0x2f4e(%rip),%rax        # 3fd8 <_ITM_deregisterTMCloneTable>
    108a:	48 85 c0             	test   %rax,%rax
    108d:	74 09                	je     1098 <deregister_tm_clones+0x28>
    108f:	ff e0                	jmpq   *%rax
    1091:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1098:	c3                   	retq   
    1099:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                                                            #
00000000000010a0 <register_tm_clones>:
    10a0:	48 8d 3d 81 2f 00 00 	lea    0x2f81(%rip),%rdi        # 4028 <__TMC_END__>
    10a7:	48 8d 35 7a 2f 00 00 	lea    0x2f7a(%rip),%rsi        # 4028 <__TMC_END__>
    10ae:	48 29 fe             	sub    %rdi,%rsi
    10b1:	48 c1 fe 03          	sar    $0x3,%rsi
    10b5:	48 89 f0             	mov    %rsi,%rax
    10b8:	48 c1 e8 3f          	shr    $0x3f,%rax
    10bc:	48 01 c6             	add    %rax,%rsi
    10bf:	48 d1 fe             	sar    %rsi
    10c2:	74 14                	je     10d8 <register_tm_clones+0x38>
    10c4:	48 8b 05 25 2f 00 00 	mov    0x2f25(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable>
    10cb:	48 85 c0             	test   %rax,%rax
    10ce:	74 08                	je     10d8 <register_tm_clones+0x38>
    10d0:	ff e0                	jmpq   *%rax
    10d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    10d8:	c3                   	retq   
    10d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                                                            #
00000000000010e0 <__do_global_dtors_aux>:
    10e0:	80 3d 41 2f 00 00 00 	cmpb   $0x0,0x2f41(%rip)        # 4028 <__TMC_END__>
    10e7:	75 2f                	jne    1118 <__do_global_dtors_aux+0x38>
    10e9:	55                   	push   %rbp
    10ea:	48 83 3d 06 2f 00 00 	cmpq   $0x0,0x2f06(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    10f1:	00 
    10f2:	48 89 e5             	mov    %rsp,%rbp
    10f5:	74 0c                	je     1103 <__do_global_dtors_aux+0x23>
    10f7:	48 8b 3d 22 2f 00 00 	mov    0x2f22(%rip),%rdi        # 4020 <__dso_handle>
    10fe:	e8 2d ff ff ff       	callq  1030 <__cxa_finalize@plt>
    1103:	e8 68 ff ff ff       	callq  1070 <deregister_tm_clones>
    1108:	c6 05 19 2f 00 00 01 	movb   $0x1,0x2f19(%rip)        # 4028 <__TMC_END__>
    110f:	5d                   	pop    %rbp
    1110:	c3                   	retq   
    1111:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1118:	c3                   	retq   
    1119:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                                                            #
0000000000001120 <frame_dummy>:
    1120:	e9 7b ff ff ff       	jmpq   10a0 <register_tm_clones>
                                                            #
0000000000001125 <sum>:
                                                            #
int sum(int x, int y)
{
                                                        #   在正式执行函数前，栈的内容是：
                                                        #   +-------+    
                                                        #   |main_val| <--- rbp (main_rbp)
                                                        #   |  ...  |    
                                                        #   |  ...  |    
                                                        #   |  ...  |
                                                        #   |main_val|
                                                        #   |  1165 | <--- rsp
                                                        #   |       |
                                                        #      
    1125:	55                  push   %rbp             #   这一步时，rbp 还和在 main 中时一样，因为没有谁
                                                        # 修改过它。当 push 其入栈之后，我们记它值为 main_rsp
                                                        # %rbp 入栈，栈内容变成：
                                                        #   +--------+      
                                                        #   |main_val|
                                                        #   |  ...   |      
                                                        #   |  ...   |      
                                                        #   |  ...   |
                                                        #   |main_val|
                                                        #   |  1165  | 
                                                        #   |main_rbp| <--- rsp
                                                        #
    1126:	48 89 e5            mov    %rsp,%rbp        #  在这里，rbp 的值变成 rsp，这里的 rbp 已经属于新函数 
                                                        # 栈内容变成：
                                                        #   +--------+      
                                                        #   |main_val|
                                                        #   |  ...   |      
                                                        #   |  ...   |      
                                                        #   |  ...   |
                                                        #   |main_val|
                                                        #   |  1165  | 
                                                        #   |main_rbp| <--- rsp, rbp
                                                        #
                                                        #
                                                        #   在这里，rbp 往下分配了 8 个字节，来保存局部变量（x, y）                                                       
    1129:	89 7d fc            mov    %edi,-0x4(%rbp)  # 栈内容变成：                                                                  
    112c:	89 75 f8            mov    %esi,-0x8(%rbp)  #   +--------+       
                                                        #   |main_val|
                                                        #   |  ...   |      
                                                        #   |  ...   |      
                                                        #   |  ...   |
                                                        #   |main_val|
                                                        #   |  1165  | 
                                                        #   |main_rbp| <--- rsp, rbp      
                                                        #   |   x    |                                                            
                                                        #   |   y    |
    return a + b;                                       #                         
    112f:	8b 55 fc            mov    -0x4(%rbp),%edx  # \                                                                 
    1132:	8b 45 f8            mov    -0x8(%rbp),%eax  #  > 在这里，用 edx, eax 分别暂存参数 a, b。                                                                
    1135:	01 d0               add    %edx,%eax        # /  然后调用机器指令 add 将其相加，结果保存到 eax                                                          
}                                                       #    eax 是 Linux 规定的返回值寄存器
                                                        #
    1137:	5d                  pop    %rbp             #   在这里，将栈中的值弹出，放到 rbp 寄存器。由于栈指针 rsp
                                                        # 指向的值就是 main 的 rbp，所以 rbp 重新还原为原来的值，rbp
                                                        # 也就重新指向回原来的位置
                                                        #   +--------+       
                                                        #   |main_val| <--- rbp (main_rbp)
                                                        #   |  ...   |      
                                                        #   |  ...   |      
                                                        #   |  ...   |
                                                        #   |main_val|
                                                        #   |  1165  | <--- rsp
                                                        #   |        |
                                                        #   |        |      这里 x, y 的值已经废弃了。        
                                                        #   |        |
                                                        #
    1138:	c3                  retq                    #   retq 指令相当于 popq %rip
                                                        # 所以，1165 将被弹出，赋予 rip
                                                        #   而 rip 指向的是 main 中 callq <sum> 的下一条指令，因此
                                                        # main 函数恢复了其执行流程
                                                        #
0000000000001139 <main>:
int main(int argc, char const *argv[])
{
    1139:	55                  push   %rbp             #       
    113a:	48 89 e5            mov    %rsp,%rbp        #        
    113d:	48 83 ec 20         sub    $0x20,%rsp       #   这部分代码是将局部变量 argc 和 argv 保存到内存
    1141:	89 7d ec            mov    %edi,-0x14(%rbp) #   我们只需注意到，rbp 往下开辟了 0x20，即 32 个
                                                        # 字节来存放一些局部变量 
    1144:	48 89 75 e0         mov    %rsi,-0x20(%rbp) #   
                                                        #
    int a = 1;                                          #         
    1148:	c7 45 fc 01 00 00 00 movl  $0x1,-0x4(%rbp)  #
    int b = 2;                                          #         
    114f:	c7 45 f8 02 00 00 00 movl  $0x2,-0x8(%rbp)  #
                                                        #
    int c = sum(a, b);                                  #   我们从这里开始看                 
    1156:	8b 55 f8            mov    -0x8(%rbp),%edx  #   \          
    1159:	8b 45 fc            mov    -0x4(%rbp),%eax  #    \ 这部分代码将参数 a, b 存放在 rdi, rsi        
    115c:	89 d6               mov    %edx,%esi        #    / 为调用 sum 函数做准备
    115e:	89 c7               mov    %eax,%edi        #   /    
                                                        #
    1160:	e8 c0 ff ff ff      callq  1125 <sum>       #   callq 相当于：
                                                        #     pushq %rip 
                                                        #     jmpq <sum> 
                                                        #   而 pushq %rip 相当于
                                                        #                 sub $0x8, %rsp
                                                        #                 movq %rip, (%rsp)   
                                                        #
                                                        #   callq 后的栈帧是：
                                                        #    +-------+
                                                        #    |main_val| <--- rbp
                                                        #    |  ...  |
                                                        #    |  ...  |
                                                        #    |  ...  |
                                                        #    |main_val|
                                                        #    |  1165 | <--- rsp
                                                        #    |       |
                                                        #   其中 1165 是下条指令的地址
                                                        #
    1165:	89 45 f4            mov    %eax,-0xc(%rbp)  #   我们从 <sum> 函数返回到此处继续执行
    return 0;                                                   
    1168:	b8 00 00 00 00      mov    $0x0,%eax
}
    116d:	c9                   	leaveq 
    116e:	c3                   	retq   
    116f:	90                   	nop
                                                            #
0000000000001170 <__libc_csu_init>:
    1170:	41 57                	push   %r15
    1172:	49 89 d7             	mov    %rdx,%r15
    1175:	41 56                	push   %r14
    1177:	49 89 f6             	mov    %rsi,%r14
    117a:	41 55                	push   %r13
    117c:	41 89 fd             	mov    %edi,%r13d
    117f:	41 54                	push   %r12
    1181:	4c 8d 25 90 2c 00 00 	lea    0x2c90(%rip),%r12        # 3e18 <__frame_dummy_init_array_entry>
    1188:	55                   	push   %rbp
    1189:	48 8d 2d 90 2c 00 00 	lea    0x2c90(%rip),%rbp        # 3e20 <__init_array_end>
    1190:	53                   	push   %rbx
    1191:	4c 29 e5             	sub    %r12,%rbp
    1194:	48 83 ec 08          	sub    $0x8,%rsp
    1198:	e8 63 fe ff ff       	callq  1000 <_init>
    119d:	48 c1 fd 03          	sar    $0x3,%rbp
    11a1:	74 1b                	je     11be <__libc_csu_init+0x4e>
    11a3:	31 db                	xor    %ebx,%ebx
    11a5:	0f 1f 00             	nopl   (%rax)
    11a8:	4c 89 fa             	mov    %r15,%rdx
    11ab:	4c 89 f6             	mov    %r14,%rsi
    11ae:	44 89 ef             	mov    %r13d,%edi
    11b1:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
    11b5:	48 83 c3 01          	add    $0x1,%rbx
    11b9:	48 39 dd             	cmp    %rbx,%rbp
    11bc:	75 ea                	jne    11a8 <__libc_csu_init+0x38>
    11be:	48 83 c4 08          	add    $0x8,%rsp
    11c2:	5b                   	pop    %rbx
    11c3:	5d                   	pop    %rbp
    11c4:	41 5c                	pop    %r12
    11c6:	41 5d                	pop    %r13
    11c8:	41 5e                	pop    %r14
    11ca:	41 5f                	pop    %r15
    11cc:	c3                   	retq   
    11cd:	0f 1f 00             	nopl   (%rax)
                                                            #
00000000000011d0 <__libc_csu_fini>:
    11d0:	c3                   	retq   
                                                            #
Disassembly of section .fini:
                                                            #
00000000000011d4 <_fini>:
    11d4:	48 83 ec 08          	sub    $0x8,%rsp
    11d8:	48 83 c4 08          	add    $0x8,%rsp
    11dc:	c3                   	retq   
